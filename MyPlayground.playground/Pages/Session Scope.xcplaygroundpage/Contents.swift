/// Example of creating a custom scoping mechanism that ties scope to a "session"

import Cocoa
import Blindside
import XCTest

class APIClient : NSObject {
    override var description: String {
        return "APIClient! \(super.description)"
    }
}

protocol SessionDelegate {
    func sessionDidClose()
}

protocol ScopeGenerator {
    func generateScope() -> BSScope
}

/// This class acts as a factory for BSScope instances that implement the
/// session-scoping behavior
class SessionScopeGenerator : NSObject, ScopeGenerator {
    private var scopeInstances = [SessionScope]()

    func generateScope() -> BSScope {
        let scopeInstance = SessionScope()
        scopeInstances.append(scopeInstance)
        return scopeInstance
    }

    func resetScope() {
        scopeInstances.map { $0.reset() }
    }
}

/// It also acts as a session delegate so it can be told when the current
/// session's scope has ended.
extension SessionScopeGenerator: SessionDelegate {

    /// This method resets internal state in response to the current session
    /// closing. The BSScope instances generated by this object will then return
    /// fresh instances the next time they are asked to `-provide:`
    func sessionDidClose() {
        self.resetScope()
    }
}

/// An internal class returned by `SessionScopeGenerator` that implements
/// BSScope. This object effectively caches a single bound dependency for
/// the duration of the session
private class SessionScope : NSObject, BSScope, BSProvider {
    var source: BSProvider?
    var instance: AnyObject?

    @objc func scope(source: BSProvider) -> BSProvider {
        if (instance == nil) {
            self.source = source
        }
        return self
    }

    @objc func provide(args: [AnyObject], injector: BSInjector) -> AnyObject {
        if let instance = instance {
            return instance
        }
        else if let source = source {
            let newInstance = source.provide(args, injector: injector)
            instance = newInstance
            self.source = nil
            return newInstance
        }
        else {
            fatalError("Cannot provide a session-scoped instance without a provider")
        }
    }

    func reset() {
        instance = nil
    }
}


/// Example Usage

class MyModule : BSModule {
    let sessionScopeGenerator: ScopeGenerator

    init(sessionScopeGenerator: ScopeGenerator) {
        self.sessionScopeGenerator = sessionScopeGenerator
    }

    @objc func configure(binder: BSBinder) {
        binder.bind("text", toInstance: "Hello World!")
        binder.bind("api", toClass: APIClient.self, withScope: sessionScopeGenerator.generateScope())
    }
}

func logout(sessionDelegate: SessionDelegate) {
    print("Logging out")
    sessionDelegate.sessionDidClose()
}



let sessionScopeGenerator = SessionScopeGenerator()
let module = MyModule(sessionScopeGenerator: sessionScopeGenerator)
let injector = Blindside.injectorWithModule(module)

injector.getInstance("text")

let apiFromFirstSession = injector.getInstance("api") as! APIClient
XCTAssertEqual(apiFromFirstSession,injector.getInstance("api") as! APIClient, "Should return the same instance during a session")

logout(sessionScopeGenerator)

let apiFromSecondSession = injector.getInstance("api") as! APIClient
XCTAssertEqual(apiFromSecondSession,injector.getInstance("api") as! APIClient, "Should return the same instance during a session")

XCTAssertNotEqual(apiFromFirstSession, apiFromSecondSession)
